
clear;

format long;

%% Initialisation
 
bitsSend = 5;    %Nombre de bits émis [1000]
f_s = 20000;        %Fréquence d'échantillonage [20000 Hz]
T_s = 1/f_s;        %Période d'échantillonage
f = 500;            %Fréquence symbole [500 Hz]
OSF = f_s/f;        %Oversampling factor [40]
k_f = 500;          %Sélectivité fréquencielle [500 Hz]
f_c = 6000;         %Fréquence porteuse [6000 Hz]
t = 0:T_s:OSF*T_s*bitsSend-T_s; %Temps d'échantillonage
phi = 0;            %Déphasage
EbN0_ratio = 0;

rate = 10;
n_T = 40;
bits = randi(2,1, bitsSend) - 1; %Séquence aléatoire
%bits = [1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,1,0,0,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,0,0;];
%bits = [0,1,0,0,0,1,0,0,1,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,1,0,1,0,0,1,1;];
bits = [0,0,0,0,1];

%% Création du message
m = ones(1,bitsSend*OSF);

k=1;
for i=1:bitsSend
    if bits(i) == 0
        for j=1:OSF
            m(k+j-1) = -1;
        end   
    end
    k = k+OSF;
end

%% Modulation FM

e_s = exp(1i*2*pi*k_f.*cumsum(m)*T_s);

%% Singal RF

s = real(e_s).*cos(2*pi*f_c*t) - imag(e_s).*sin(2*pi*f_c*t);

%% Bruit blanc

%Paramètres du bruit
Ps_c = sum(s.^2)/(bitsSend*OSF);
Eb = Ps_c/f;
N0 = Eb/(10^(EbN0_ratio/10));
sigma_n = sqrt(N0*f_s/2);

%Génération du bruit
n = sigma_n*randn(1,bitsSend*OSF);
n = [0.319799893876887,3.42785376033952,-5.86453005294995,5.69131802832349,-2.77766344379690,2.04831073055970,3.31901605438595,4.18398862791592,-1.63603269932479,0.0768906222793901,-0.513449136989749,-1.91526852210420,0.859221716775332,1.13413005030040,-1.11411824210885,0.418558844047465,8.45460792667097,-0.0239260313534215,2.24617510855632,-1.46267789397174,-1.66929649236431,-1.09347471684725,1.78528843575458,-2.53468932882825,-5.85953222421829,0.168283823155344,-1.38006609145021,0.885461374227505,0.267547306951037,2.30567691367530,2.84843139168831,-4.19203636426180,-4.82114157048383,1.58883370486862,0.968894760598553,-2.96988615879054,3.91300910105490,0.104392839916764,0.390757332215576,0.866272380193773,2.38488168759429,4.82088440536439,-0.828440100486796,-5.47290179345223,3.20485551523682,-2.93375913864850,3.93286238551664,-1.86412693929761,4.71647937046465,-2.54872652350000,-3.51834712924595,3.02610861833183,-4.31034758935340,2.15219862346910,1.38451986073360,-0.453051762268127,-1.08002060951969,6.50736859695810,-1.18438377547736,-0.601475322197716,-2.96853253095337,-2.57239386227665,-1.84556454001424,5.40599388869869,-1.23461586782436,-2.18217828235568,-1.41739831253536,2.25905637287263,-4.16070753323113,1.98313419204865,-4.20992394194062,-0.413778187183913,-5.77715294810858,1.69473563900021,2.19103061114420,-2.17422323074607,1.00426272000263,0.514952694304521,3.66544633455406,0.405998689744294,3.28705523362037,-0.369262771499679,-2.05009483597885,-0.120107115722460,-0.630320421520168,2.78808493991874,-0.177543141179905,-2.66023088352908,-0.489659209994220,3.75866637340436,-1.31205202016877,-2.08272907470221,3.11165170754253,0.320109444637361,-1.14697652482808,-2.33637874729122,-4.67967259443988,0.485004057057498,-1.00249726914904,1.00850806499410,-4.60600473605885,4.18000771575006,1.54067412766389,-4.95410718950959,3.34271605009296,-1.85808413973367,0.955708670807528,0.694001008150867,-2.77711572444772,-9.04854053555337,1.69357455017639,-1.08161694404724,-1.89059570026563,1.32471829936653,-2.18096193595153,2.12249243557949,0.477179668375427,-3.13482556361716,2.64628864912442,1.50052911612450,3.95969610936456,-2.82272068295588,-2.83110569525606,0.990823580967339,2.10934406447205,2.61873447336513,0.0205841451220665,-0.745956625213492,2.06440156465603,6.21239727398427,2.79730077032092,0.267329330820530,-1.81677298137033,1.58035025525493,-1.53087279055083,0.754031306775989,2.46103686996763,2.92280764443272,1.85985538746858,4.35741078198438,5.85402400337738,-6.00094290057893,-5.62469324408757,-2.91764777087160,-6.31800018320080,-1.12924953498130,-1.06379260786009,0.791916560463932,0.904923387261776,-2.16985553405167,-2.57192623528570,2.50895918737771,-1.20781694397764,-4.33612831483611,0.0325950328631069,0.645522207993304,-1.29977677640949,2.09836469359550,0.713985815598538,-0.673069021776677,-0.139249540187406,1.44889814271504,-1.39588431581599,-3.33603445252550,-0.492000628109116,0.408401402820255,1.61095381981865,-0.0952589643653116,-1.44631496291722,1.88577882732383,-0.359008467594819,2.55203528015987,-0.283981197200109,-0.0198974469930388,-0.290488949148745,-2.91321123943958,-2.93127812559965,-3.03964665993611,5.64412752665052,-0.633053158923510,2.97384276571143,1.10412928489277,5.87956055885192,2.93165899009745,-3.88000035313275,-1.03482102351759,2.81963349372846,0.911322815704858,7.16317691550121,-0.151442522163647,-4.90742507553752,1.40431473689119,-2.88342446425461,0.156326081549990,3.40908038657796,0.974546808026708,0.947540269712291,-0.623659516132691,-0.463028388642661,-0.325938708915985;];
%Ajout du bruit
r = s + n;

%% Filtre passe-bas

%Réponse impulsionnel du filtre passe bas
h = rcosfir(0, n_T, rate, 1/(3*f_c));
enlever = (length(h)-1)/2;

%Filtre appliqué juste sur le message sans bruit
r_cos = s.*cos(2*pi*f_c*t + phi);
r_sin = s.*sin(2*pi*f_c*t + phi);

e_r = conv(r_cos,h) + 1i*conv(r_sin,h);
e_r = e_r(1+enlever:end-enlever);

%Filtre appliqué sur le message avec bruit
r_cos = r.*cos(2*pi*f_c*t + phi);
r_sin = r.*sin(2*pi*f_c*t + phi);

e_r_bruit = conv(r_cos,h) + 1i*conv(r_sin,h);
e_r_bruit = e_r_bruit(1+enlever:end-enlever);

%% Démodulateur FSK

e_s0 = exp(-1i*2*pi*k_f*t);
e_s1 = exp(1i*2*pi*k_f*t);

m_fsk = zeros(1,bitsSend);
for k=1:bitsSend
    
    s0_sum = 0;
    s1_sum = 0;
     
    for i=1:OSF
        s0_sum = s0_sum + e_r_bruit((k-1)*OSF+i)*conj(e_s0((k-1)*OSF+i));
        s1_sum = s1_sum + e_r_bruit((k-1)*OSF+i)*conj(e_s1((k-1)*OSF+i));
    end
    
    if abs(s0_sum) > abs(s1_sum)
        m_fsk(k) = 1;
    end
end

%% Démodulateur FM
g = 1/(2*pi*k_f*rate);
B_T = 2*k_f + 2*f;

%Démodulation sans bruit
d_er = gradient(e_r,T_s);  %derivee par rapport au temps (1x400)

de_r_dt = diff(e_r);
de_r_dt(length(de_r_dt)+1) = 0; % On corrige la longueur
de_r_dt = de_r_dt./T_s;

s1 = g.*(de_r_dt+1i*pi*B_T.*e_r);    % apres 2 filtres a pente
s2 = g.*(-de_r_dt+1i*pi*B_T.*e_r);    % apres 2 filtres a pente 

s_diff = abs(s2)-abs(s1);

m_fm = zeros(1,bitsSend*OSF);
for k=1:bitsSend*OSF
    if s_diff(k) > 0
        m_fm(k) = 1;
    end
end

%Démodulation avec bruit
d_er_bruit = gradient(e_r_bruit,T_s);  %derivee par rapport au temps (1x400)

de_r_dtBruit = diff(e_r_bruit); 
de_r_dtBruit(length(de_r_dtBruit)+1) = 0; % On corrige la longueur 
de_r_dtBruit = de_r_dtBruit./T_s;

s1 = g.*(de_r_dtBruit+1i*pi*B_T.*e_r_bruit);    % apres 2 filtres a pente
s2 = g.*(-de_r_dtBruit+1i*pi*B_T.*e_r_bruit);    % apres 2 filtres a pente 

s_diff_bruit = abs(s2)-abs(s1);


m_fm_bruit = zeros(1,bitsSend*OSF);
for k=1:bitsSend*OSF
    if s_diff_bruit(k) > 0
        m_fm_bruit(k) = 1;
    end
end

% Interprétation du message avec bruit
m_fm_final = zeros(1,bitsSend);
for k=1:bitsSend

    for l=1:OSF
        m_fm_final(k) = m_fm_final(k) + m_fm_bruit((k-1)*OSF+l);
    end
    m_fm_final(k) = round(m_fm_final(k)/OSF);
end

%% BER

incorrectBits = 0;
for k=1:bitsSend
   if(m_fm_final(k) ~= bits(k))
       incorrectBits = incorrectBits + 1;
   end
end

BER_FM = incorrectBits/bitsSend;

incorrectBits = 0;
for k=1:bitsSend
   if(m_fsk(k) ~= bits(k))
       incorrectBits = incorrectBits + 1;
   end
end

BER_FSK = incorrectBits/bitsSend;

%% PSD
% L = 512;
% D = 250;
% [PSD_m, PSD_freq] = welch(m,t,L,D);            %PSD du message
% PSD_es = welch(e_s,t,L,D);                     %PSD du signal modulé en FM
% PSD_s = welch(s,t,L,D);                        %PSD du signal RF
% %PSD_er = welch(e_r,t,L,D);                     %PSD du signal après le FPB
% %PSD_er = welch(m_fm,t,L,D);                    %PSD du singal démodulé FM
% 
% plot(PSD_freq, PSD_m,'Color','Green');
% grid on;
% hold on;
% plot(PSD_freq, PSD_es);
% plot(PSD_freq, PSD_s, 'Color', 'Red');
% legend('Message','Signal FM','Signal RF');
% xlabel('Fréquence [Hz]');
% ylabel('PSD');

%% SNR & FOM

%Ps_c = sum(s.^2)/(OSF*bitsSend);
Ps_o = sum(s_diff.^2)/(OSF*bitsSend);
m_psd = s_diff_bruit - s_diff;
Pn_o = sum(m_psd.^2)/(OSF*bitsSend);
Pn_c = N0*f*OSF/2;

SNR_c = 10*log10(Ps_c/Pn_c);
SNR_o = 10*log10(Ps_o/Pn_o);
FOM = SNR_o - SNR_c; 
